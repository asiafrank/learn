# ----------------------------------------
# 公用用户分群的基本表达式模版(Pattern),这只是说明文件，无任何代码意义
# 拼凑成 UserClassificationConditionPO.fullExpression 的值时，需要根据前端页面传递的参数值替换 ${} 占位符
# 方法前加英文叹号，代表"用户不是"条件，如 !#createDays(3,30,#para) 表示"不是3到30天创建的用户群体"
# -----------------------------------------
# 新增规则流程：
# 1. common-evl.properties 里维护说明文档
# 2. com.hhdd.kdadmin.core.appoperation.helper.ExpressionHelper.buildPatternMap 方法中增加创建 Pattern 的方法
# 3. 如果是用于版面的规则:
#    a.请修改 com.hhdd.kdadmin.core.appoperation.helper.ExpressionHelper.RuleForm 类，支持表单提交
#    b.修改表单反向解析逻辑(用于前端回显) com.hhdd.kdadmin.core.appoperation.helper.ExpressionHelper.buildRuleFormByUserClassificationFullExpression
#    c.修改表单正向解析逻辑(用于前端表单提交) com.hhdd.kdadmin.core.appoperation.helper.ExpressionHelper.buildUserClassificationByRuleForm
# 4. 修改下前端对应表单页面交互，就完成啦!
# ----------------------------------------

# 用户ID
# userId Long
userId=#userId(${userId},#para)

# 用户创建时间, 0表示无限大99999
# [min,max] 天闭区间
# min,max Integer
createDays=#createDays(${min},${max},#para)

# 账户类型：0 游客，1 手机，2 微信，3 华为，4 bbk，99 非游客
# accountType Integer
accountType=#accountType(${accountType},#para)

# 是否是VIP：1是，2否
# vipFlag Integer
vipFlag=#vipFlag(${vipFlag},#para)

# VIP创建天数
# [min,max]区间天数
# min, max Integer,0 就代表 99999
vipCreateDays=#vipCreateDays(${min},${max},#para)

# VIP到期天数
# [min,max] 天闭区间
# min, max Integer, 0 就代表 99999
vipExpireDays=#vipExpireDays(${min},${max},#para)

# 性别：1男，2女，3未知
# gender Integer
gender=#gender(${gender},#para)

# 年龄
# [min,max] 区间
# min, max Integer
age=#age(${min},${max},#para)

# 设备类型  ipad:1  iphone:2  ipod:3  android:4(是默认)  androidPad: 5  x86:0
# deviceType Integer
deviceType=#deviceType(${deviceType},#para)

# app版本
# [min,max]
# min, max String
appVersion=#appVersion('${min}','${max}',#para)

# app渠道: _91,alitmjl,alpha,bbg,bd,bd_bc2,beta,debugpackage,dushulang,guanwang,huawei,jinli_youlianda,
# lenovo,meizu,meizu_youlianda,oppo,qihu360,samsung,sanxing_youlianda,tongyongban,toutiao,vivo,
# waiyutong,wdj,xiaomi,youxuepai,yunzhisheng,yyb,zhangmeng
# appChannel String
appChannel=#appChannel('${appChannel}',#para)

# 活跃天数
# days: 1昨天  3过去3天，7过去7天，14过去14天，30过去30天，60过去60天
# min: 最小值
# max: 最大值, 0 就代表 99999
# 当天往前推 days 天内活跃了 [min,max] 区间天数
activityDays=#activityDays(${days},${min},${max},#para)


# 已支付订单数
# type(String): “all” 全部 “compilation” 合集，“wallet” 金豆，“vip” 会员
# days(Integer): 1昨天  3过去3天，7过去7天，14过去14天，30过去30天，60过去60天
# min: 最小值
# max: 最大值, 0 就代表 99999
# 当天往前推 days 天内,  支付了 type 订单 [min,max] 区间个数
paidOrders=#paidOrders('${type}',${days},${min},${max},#para)

# 未支付订单数
# type(String): “all” 全部 “compilation” 合集，“wallet” 金豆，“vip” 会员
# days(Integer): 1昨天  3过去3天，7过去7天，14过去14天，30过去30天，60过去60天
# min: 最小值
# max: 最大值, 0 就代表 99999
# 当天往前推 days 天内,  未支付了 type 订单 [min,max] 区间个数
unpaidOrders=#unpaidOrders('${type}',${days},${min},${max},#para)

# 已购买优才计划，是否开通   0未购买（admin端可以忽略），1已购买未开通，2已购买已开通
# planOpenFlag Integer
planOpenFlag=#planOpenFlag(${planOpenFlag},#para)

# 最后访问业务类型  1绘本，2故事
# lastServiceType Integer
lastServiceType=#lastServiceType(${lastServiceType},#para)

# VIP 类型，与 vipFlag 不同，不要混为一谈 这相当于 VipFlag 的详细版本
# vipType(Integer): 0-非VIP，1-正式VIP，2-体验VIP，4-全部VIP
vipType=#vipType(${vipType},#para)

# 正式VIP已过期天数 （如果不是VIP，或者VIP未过期，默认值为-1）
# 所以 min 和 max 的可输入范围是0-无限
# min(Integer)
# max(Integer)
# 已过期了[min,max]天区间
# 例：如果一个用户 2019-09-18 12:00:00 过期，则当 2019-09-18 12:00:01 分时，用户已过期时间算 1 天
ofVipAfterExp=#ofVipAfterExp(${min},${max},#para)

# 体验VIP已过期天数 （如果不是VIP，或者VIP未过期，默认值为-1）
# 所以 min 和 max 的可输入范围是0-无限
# min(Integer)
# max(Integer)
# [min,max] 区间天数
exVipAfterExp=#exVipAfterExp(${min},${max},#para)

# 自动续费会员类型
# （注意要是自动续费会员，隐含条件会员类型肯定是VIP（包含正式和体验）。
#  反例：如果会员类型是非VIP，且自动续费为连续包月，那肯定匹配不到任何人；这两个条件是互斥的。）
# type 1：连续包月，2：连续包季，3：连续包年 (默认是0：非自动续费)
vipWithholding=vipWithholding(${type},#para)

#------- 2019-11-11 增加 --------

# 用户创建日期范围
# start   开始时间的毫秒数   1558681974000l   注意最后加个l，'L' 的小写
# end     结束时间的毫秒数   1558681974000l   注意最后加个l
# 下面由前端控制
# 当 start 不填时，start 默认写 0
# 当 end 不填时，写 5000000000000l
# 用户创建日期范围：[start,end] 闭区间
createDate=createDate(${start},${end},#para)

# 用户id指定尾号
# nums 数组, 至少要有一个元素，元素范围必须为 [0,9] 区间
userIdLastNum=userIdLastNum(#para,${nums})

#------- 2019-12-17 增加 --------
# 活动用户：一个用户是否参加过这些活动
# activityIds 数组，至少有一个元素，元素为 activity.general_activity_info.id
activityUser=activityUser(#para,${activityIds})

#------ 2020-03-27 增加 ----------

# 是否是打卡用户：1是，2否
cardUserFlag=cardUserFlag(${cardUserFlag},#para)

#------ 2020-04-13 添加 --------
# 会员档位类型:
# payTypes: 可变参数，如 payType(#para,1,2) 形式，payTypes 中的元素包含下面几项
# 1:1个月
# 2:3个月
# 3:12个月
# 4:24月
# 5:15天
# 6:1天
# 7:5年
# 21:连续包月
# 22:连续包季
# 23:连续包年
# 28:付费兑换码
# 29:终身会员
# 30:活动赠送
# 31:新用户赠送
# 40:充值赠送
# 41:HD灰度赠送
# 99:非会员档位（档位升级使用，原价购买）
#
# 月卡用户：【1:1个月 】【21:连续包月】
# 季卡用户：【2:3个月】【22:连续包季】
# 年卡用户：【3:12个月】【23:连续包年】
# 5年卡用户：【7:5年】
# 终身会员：【29:终身会员】
payType=payType(#para,${payTypes})

# vip身份：0非vip，1综合VIP，3听书VIP，4绘本VIP
vipIdentity=vipIdentity(${vipIdentity},#para)

#是否绑定过微信 1 是，0 否
boundWechat=boundWechat(${boundWechat},#para)

#是否绑定过手机 1 是，0 否
boundPhone=boundPhone(${boundPhone},#para)


#------ 2020-07-27 添加 --------
# 学段
#  0：未选，2：幼儿园，3：小学
schoolPeriod=schoolPeriod(${period},#para)

#用户未购买二级品筛选项
subscribeCourseId=subscribeCourseId(${courseId},#para)
#综合VIP生效日期
vipPurchaseTime=vipPurchaseTime(${vipPurchaseType},${start}, ${end}, #para) 
#签到天数
consecutiveSign=consecutiveSign(#signDay,#para)
#是否含有活动金豆
hasActivityWallet=hasActivityWallet(int hasActivityWallet, Map<String, Object> para)
#账户当前活动金豆余额
activityWalletNum=activityWalletNum(long min, long max, Map<String, Object> para)
#用户标签
label=label(${labelId}, #para)
#螃蟹等级形态
elfShapeId=elfShapeId(${shapeId}, #para)
#螃蟹饥饿状态
elfIsHunger=(${isHunger}, #para)
