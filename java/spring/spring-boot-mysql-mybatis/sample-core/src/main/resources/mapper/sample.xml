<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2015-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sampleDAO">
  <resultMap id="sample" type="com.asiafrank.core.model.Sample">
    <id property="id" column="id"/>
    <result property="name" column="name"/>
    <result property="description" column="description"/>
    <result property="createdAt" column="created_at"/>
    <result property="updatedAt" column="updated_at"/>
  </resultMap>

  <sql id="sql_insert_column_list">
    <trim prefix="" prefixOverrides=",">
      <if test="entity.id != null">,id</if>
      <if test="entity.name != null and entity.name != ''">,name</if>
      <if test="entity.description != null and entity.description != ''">,description</if>
      <if test="entity.createdAt != null">,created_at</if>
      <if test="entity.createdAt == null">,created_at</if>
      <if test="entity.updatedAt != null">,updated_at</if>
      <if test="entity.updatedAt == null">,updated_at</if>
    </trim>
  </sql>

  <sql id="sql_insert_property_list">
    <trim prefix="" prefixOverrides=",">
      <if test="entity.id != null">,#{entity.id}</if>
      <if test="entity.name != null and entity.name != ''">,#{entity.name}</if>
      <if test="entity.description != null and entity.description != ''">,#{entity.description}</if>
      <if test="entity.createdAt != null">,#{entity.createdAt}</if>
      <if test="entity.createdAt == null">,NOW()</if>
      <if test="entity.updatedAt != null">,#{entity.updatedAt}</if>
      <if test="entity.updatedAt == null">,NOW()</if>
    </trim>
  </sql>

  <sql id="sql_column_list">
    id
    ,name
    ,description
    ,created_at
    ,updated_at
  </sql>

  <sql id="sql_update_set">
    <trim prefix="SET" prefixOverrides=",">
      <if test="entity != null">
        <if test="entity.id != null">,id = #{entity.id}</if>
        <if test="entity.name != null and entity.name != ''">,name = #{entity.name}</if>
        <if test="entity.description != null and entity.description != ''">,description = #{entity.description}</if>
        <if test="entity.createdAt != null">,created_at = #{entity.createdAt}</if>
        <if test="entity.updatedAt != null">,updated_at = #{entity.updatedAt}</if>
        <if test="entity.updatedAt == null">,updated_at = NOW()</if>
      </if>
    </trim>
  </sql>

  <sql id="sql_force_update_set">
    <trim prefix="SET" prefixOverrides=",">
      <if test="_parameter.containsKey('entity_id')">,id = #{entity_id, jdbcType=BIGINT}</if>
      <if test="_parameter.containsKey('entity_name')">,name = #{entity_name, jdbcType=LONGVARCHAR}</if>
      <if test="_parameter.containsKey('entity_description')">,description = #{entity_description, jdbcType=LONGVARCHAR}
      </if>
      <if test="_parameter.containsKey('entity_createdAt')">,created_at =
        #{entity_createdAt, jdbcType=TIMESTAMP_WITH_TIMEZONE}
      </if>
      <if test="_parameter.containsKey('entity_updatedAt')">,updated_at =
        #{entity_updatedAt, jdbcType=TIMESTAMP_WITH_TIMEZONE}
      </if>
      <if test="!_parameter.containsKey('entity_updatedAt')">,updated_at = NOW()</if>
    </trim>
  </sql>

  <sql id="sql_condition">
    <if test="condition != null">
      <if test="condition.id != null">AND id = #{condition.id}</if>
      <if test="condition.name != null and condition.name != ''">AND name = #{condition.name}</if>
      <if test="condition.description != null and condition.description != ''">AND description =
        #{condition.description}
      </if>
      <if test="condition.createdAt != null">AND created_at = #{condition.createdAt}</if>
      <if test="condition.updatedAt != null">AND updated_at = #{condition.updatedAt}</if>
      <if test="!condition.expressionChainList.empty">
        AND
        <foreach collection="condition.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  ${expression.column} ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  ${expression.column} ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  ${expression.column} ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  ${expression.column} ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
    </if>
  </sql>

  <sql id="sql_pagination_start">
    <![CDATA[
  ]]>
  </sql>

  <sql id="sql_pagination_end">
    <![CDATA[
    LIMIT #{offset}, #{limit}
  ]]>
  </sql>

  <insert id="insert" parameterType="java.util.Map">
    <selectKey order="AFTER" keyProperty="entity.id" resultType="long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO sample (
    <include refid="sql_insert_column_list"/>
    ) VALUES (
    <include refid="sql_insert_property_list"/>
    )
  </insert>

  <select id="get" parameterType="java.util.Map" resultMap="sample">
    SELECT
    <include refid="sql_column_list"/>
    FROM sample
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
  </select>

  <select id="getById" parameterType="java.util.Map" resultMap="sample">
    SELECT
    <include refid="sql_column_list"/>
    FROM sample
    WHERE id = #{id}
  </select>

  <select id="find" parameterType="java.util.Map" resultMap="sample">
    <if test="offset != null">
      <include refid="sql_pagination_start"/>
    </if>
    SELECT
    <include refid="sql_column_list"/>
    FROM sample
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
    <if test="orderBy != null">
      ORDER BY ${orderBy}
    </if>
    <if test="offset != null">
      <include refid="sql_pagination_end"/>
    </if>
  </select>

  <select id="findByIdList" parameterType="java.util.Map" resultMap="sample">
    SELECT
    <include refid="sql_column_list"/>
    FROM sample
    WHERE id IN
    <foreach collection="idList" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
    <include refid="sql_condition"/>
    <if test="orderBy != null">
      ORDER BY ${orderBy}
    </if>
  </select>

  <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT count(${count_column}) AS count_ FROM sample
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
  </select>

  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.HashMap">
    SELECT ${aggregate_sql} FROM sample
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
  </select>

  <update id="update" parameterType="java.util.Map">
    UPDATE sample
    <include refid="sql_update_set"/>
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
  </update>

  <update id="updateById" parameterType="java.util.Map">
    UPDATE sample
    <include refid="sql_update_set"/>
    WHERE id = #{id}
  </update>

  <update id="updateByIdList" parameterType="java.util.Map">
    UPDATE sample
    <include refid="sql_update_set"/>
    WHERE id IN
    <foreach collection="idList" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
    <include refid="sql_condition"/>
  </update>

  <update id="forceUpdate" parameterType="java.util.Map">
    UPDATE sample
    <include refid="sql_force_update_set"/>
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
  </update>

  <update id="forceUpdateById" parameterType="java.util.Map">
    UPDATE sample
    <include refid="sql_force_update_set"/>
    WHERE id = #{id}
  </update>

  <update id="forceUpdateByIdList" parameterType="java.util.Map">
    UPDATE sample
    <include refid="sql_force_update_set"/>
    WHERE id IN
    <foreach collection="idList" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
    <include refid="sql_condition"/>
  </update>

  <delete id="remove" parameterType="java.util.Map">
    DELETE FROM sample
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition"/>
    </trim>
  </delete>

  <delete id="removeById" parameterType="java.util.Map">
    DELETE FROM sample
    WHERE id = #{id}
  </delete>

  <delete id="removeByIdList" parameterType="java.util.Map">
    DELETE FROM sample
    WHERE id IN
    <foreach collection="idList" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
    <include refid="sql_condition"/>
  </delete>
</mapper>
