## 多版本并发控制（MVCC - multiversion concurrency control）

每个 write(Q) 操作创建 Q 的一个新版本(version)。当事务发出一个 read(Q) 操作时，并发控制管理器选择 Q 的一个版本进行读取。


### 多版本时间戳排序

这是时间戳排序协议的扩展。

对每个数据项 Q，有一个版本序列 <Q1,Q2,Q3...Qm> 与之关联，每个版本 Qk 包含三个数据字段：

- Content：Qk 版本的值
- W-timestamp(Q): 创建 Qk 版本的事务的时间戳
- R-timestamp(Q): 所有成功地读取 Qk 版本的事务的最大时间戳

事务（如 Ti）通过发出 write(Q)操作创建数据项 Q 的一个新版本 Qk，版本的 Content 字段保存事务 Ti 写入的值，系统将 W-timestamp 与 R-timestamp 初始化为 TS(Ti)。每当事务 Tj 读取 Qk 的值且 R-timestamp(Qk) < TS(Tj) 时，R-timestamp 的值就更新。

下面展示的是 **多版本时间戳排序机制** 保证可串行性。该机制运作如下：
假设事务 Ti 发出 read(Q) 或 write(Q) 操作，令 Qk 表示 Q 满足如下条件的版本，其 W-timestamp <= TS(Ti) 的最大写时间戳。

- 1. 如果事务 Ti 发出 read(Q)，则返回值是 Qk 的内容。
- 2. 如果事务 Ti 发出 write(Q)，且若 TS(Ti) < R-timestamp(Qk)，（即其他事务 TS(Tj) > TS(Ti) 且读取了 Qk），则回滚事务 Ti，另一方面，若 TS(Ti)=W-timestamp(Qk)，则系统覆盖 Qk 的内容；否则（若 TS(Ti) > R-timestamp(Qk)）,创建 Q 的一个新版本。

删除：假设某数据项的两个版本 Qk 与 Qj，Qk 比 Qj 旧，这两个版本的 W-timestamp 都小于系统中最老的事务的时间戳，那么 Qk 和 Qj 中较旧的版本也就是 Qk 将不会再用到，因而可以删除 Qk。

多版本排序机制优点：读请求从不失败且不必等待。在典型的数据库系统中，读操作比写操作频繁，因而这个有点对于实践来说至关重要。

缺点：
- 读数据要求更新 R-timestamp 字段，于是产生两次潜在的磁盘访问而不是一次（读一次，写一次）。
- 事务间的冲突通过回滚而不是等待来解决。这种做法开销很大。**多版本两阶段封锁** 可以减轻这个问题。

### 多版本两阶段封锁

多版本两阶段封锁协议（multiversion two-phase locking protocol）希望将多版本并发控制的优点与两阶段封锁的优点结合起来。该协议对 **只读事务** 与 **更新事务** 加以区分。
（前面一直提到的数据项的时间戳，这种时间戳并不是真正基于时钟的时间戳，而是一个计数器，我们称之为 ts-counter，这个计数器在提交处理时增加计数）。

- 只读事务：在只读事务开始执行前，数据库系统读取 ts-counter 的当前值来作为该事务的时间戳。只读事务在执行读操作时遵从**多版本时间戳排序协议** 。因此，当只读事务 Ti 发出 read(Q)时，返回值是小于 TS(Ti) 的最大时间戳的版本的内容。

- 更新事务：执行强两阶段封锁协议；即它们持有全部锁直到事务结束。因此它们可以按提交的次序进行串行化。
  - 当更新事务读取一个数据项时，它在获得该数据项上的共享锁后读取该数据项创建的最新版本的值。
  - 当更新事务想写一个数据项时，它首先要获得该数据项上的排他锁，然后为此数据项创建一个新版本。写操作在新版本上进行，新版本的时间戳最初置为正无穷，它大于任何可能的时间戳值。
  - 当更新事务 Ti 完成其任务后，它按如下方式进行提交：首先，Ti 将它创建的每一版本的时间戳设置为 ts-counter 的值加 1；然后，Ti 将 ts-counter 增加 1。在同一时间内只允许有一个更新事务进行提交。这样，在 Ti 增加了 ts-counter 之后启动的只读事务将看到 Ti 更新的值，而那些在 Ti 增加 ts-counter 之前启动的只读事务将看到 Ti 更新之前的值。无论那种情况，只读事务均不必等待加锁。多版本两阶段封锁也保证调度是可恢复的和无级联的。

删除：与多版本时间戳排序中采用的方法类似。假设有某数据项的两个版本 Qk 与 Qj，两个版本的时间戳都小于或等于系统中最老的只读事务的时间戳。则两个版本中较旧的将不会再使用，可以删除。

## 快照隔离


